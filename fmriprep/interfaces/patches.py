# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
#
# Copyright 2023 The NiPreps Developers <nipreps@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# We support and encourage derived works from this project, please read
# about our expectations at
#
#     https://www.nipreps.org/community/licensing/
#
"""
Temporary patches
-----------------

"""

from random import randint
from time import sleep
import os, glob

from nipype.algorithms import confounds as nac
from numpy.linalg.linalg import LinAlgError
from nipype.interfaces.afni.base import AFNICommand, AFNICommandInputSpec
from nipype.interfaces.base import (
    TraitedSpec,
    traits,
    File,
    OutputMultiPath,
)



class RobustACompCor(nac.ACompCor):
    """
    Runs aCompCor several times if it suddenly fails with
    https://github.com/nipreps/fmriprep/issues/776

    """

    def _run_interface(self, runtime):
        failures = 0
        while True:
            try:
                runtime = super()._run_interface(runtime)
                break
            except LinAlgError:
                failures += 1
                if failures > 10:
                    raise
                start = (failures - 1) * 10
                sleep(randint(start + 4, start + 10))

        return runtime


class RobustTCompCor(nac.TCompCor):
    """
    Runs tCompCor several times if it suddenly fails with
    https://github.com/nipreps/fmriprep/issues/940

    """

    def _run_interface(self, runtime):
        failures = 0
        while True:
            try:
                runtime = super()._run_interface(runtime)
                break
            except LinAlgError:
                failures += 1
                if failures > 10:
                    raise
                start = (failures - 1) * 10
                sleep(randint(start + 4, start + 10))

        return runtime

class TSplitInputSpec(AFNICommandInputSpec):
    in_file = File(
        desc="input file to 3dTsplit4D",
        argstr=" %s",
        position=-1,
        mandatory=True,
        copyfile=False,
    )
    out_name = File(
        mandatory=True,
        desc="output image file name",
        argstr="-prefix %s.nii",
    )
    digits = traits.Int(
        argstr="-digits %d", desc="Number of digits to include in split file names"
    )

class TSplitOutputSpec(TraitedSpec):
    out_files = OutputMultiPath(File(exists=True))

class TSplit(AFNICommand):
    """Converts a 3D + time dataset into multiple 3D volumes (one volume per file).
    For complete details, see the `3dTsplit4D Documentation.
    <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dTsplit4D.html>`_
    """

    _cmd = "3dTsplit4D"
    input_spec = TSplitInputSpec
    output_spec = TSplitOutputSpec

    def _list_outputs(self):
        """Create a Bunch which contains all possible files generated
        by running the interface.  Some files are always generated, others
        depending on which ``inputs`` options are set.
        Returns
        -------
        outputs : Bunch object
            Bunch object containing all possible files generated by
            interface object.
            If None, file was not generated
            Else, contains path, filename of generated outputfile
        """
        outputs = self._outputs().get()
        outputs["out_files"] = sorted(glob.glob(
            os.path.join(os.getcwd(),'{outname}.**.nii'.format(
            outname=self.inputs.out_name))))
        return outputs